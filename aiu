#! /usr/bin/env modernish
#! use safe
#! use sys/base
#! use var/local
#! use var/loop
#! use var/string

showusage() {
putln "Usage: aiu <command>
Commands:
    list|l - lists unwatched episodes
    open|o - lets you pick an episode using dmenu
    add|a <filename> - adds a file to the backlog
    dir|d - adds all the files in the current directory to the backlog
    show|s - shows the current configuration
    write|w - writes the current configuration into the config file
    edit|e - opens the config file using $EDITOR
    clean|c - removes all with unavailable files from the backlog
    help|h - displays this message"
}


findquote() {
    LOCAL _fq_c _fq_n _fq_v _fq_e IFS; BEGIN

    _fq_n=$1

    for _fq_n do
        case ${_fq_n} in
        ( *=* )
            _fq_v=${_fq_n#*=}
            _fq_n=${_fq_n%%=*}
            case ${_fq_n} in
            ( "" | [0123456789]* | *[!"$ASCIIALNUM"_]* )
                _fq_e=2
                break ;;
            esac ;;
        ( "" | [0123456789]* | *[!"$ASCIIALNUM"_]* )
            _fq_e=2
            break ;;
        ( * )   ! isset "${_fq_n}" && _fq_e=1 && break
            eval "_fq_v=\${${_fq_n}}" ;;
        esac
        _fq_e=0

        replacein -a _fq_v \[ \\\[
        replacein -a _fq_v \] \\\]
        replacein -a _fq_v \? \\\?
        replacein -a _fq_v \* \\\*

        eval $_fq_n=$_fq_v
    done

    case ${_fq_e} in
    ( 1 )   die "findquote: unset variable: ${_fq_n}" ;;
    ( 2 )   die "findquote: invalid variable name: ${_fq_n}" ;;
    esac

    END
}

aiu_init() {
    aiu_home=${XDG_CONFIG_HOME:-$HOME/.config}/aiu

    if is present $aiu_home; then
        if not is -L dir $aiu_home; then
            exit 1 $aiu_home exists but is not a directory
        elif not can read $aiu_home; then
            exit 1 $aiu_home does not have read permissions
        elif not can write $aiu_home; then
            exit 1 $aiu_home does not have write permissions
        fi
    else
        mkdir -p $aiu_home
    fi

    if is present $aiu_home/backlog; then
        if not is -L reg $aiu_home/backlog; then
            exit 1 $aiu_home/backlog exists but is not a regular file
        elif not can read $aiu_home/backlog; then
            exit 1 $aiu_home/backlog does not have read permissions
        elif not can write $aiu_home/backlog; then
            exit 1 $aiu_home/backlog does not have write permissions
        fi
    else
        touch $aiu_home/backlog
    fi

    if is present $aiu_home/config; then
        if not is -L reg $aiu_home/config; then
            exit 1 $aiu_home/config exists but is not a regular file
        elif not can read $aiu_home/config; then
            exit 1 $aiu_home/config does not have read permissions
        elif not can write $aiu_home/config; then
            exit 1 $aiu_home/config does not have write permissions
        fi
    fi
}

aiu_conf_load() {
    if is present $aiu_home/config; then
        . $aiu_home/config
    fi

    if which -s xdg-user-dir; then
        VIDLIB=$(xdg-user-dir VIDEOS)
        COMLIB=$(xdg-user-dir DOCUMENTS)
    else
        VIDLIB=$HOME/Videos
        COMLIB=$HOME/Documents
    fi

    conf_vid_lib=${video_library:-$VIDLIB}
    conf_com_lib=${comic_library:-$COMLIB}

    if which -s xdg-open; then
        PLAYER=xdg-open
        READER=xdg-open
    else
        PLAYER=$(which -1 mpv vlc gmplayer smplayer totem mplayer2 mplayer)
        READER=$(which -1 YACReader mcomix zathura)
    fi

    if str empty $PLAYER; then
        exit 1 Could not autodetect a movie player, please configure one manually
    fi

    if str empty $READER; then
        exit 1 Could not autodetect a comic reader, please configure one manually
    fi

    conf_player=${player:-$PLAYER}
    conf_reader=${reader:-$READER}

    if which -1 -s rofi; then
        DMENU="rofi -dmenu"
    elif which -1 -s dmenu; then
        DMENU=dmenu
    fi

    if str empty $READER; then
        exit 1 Could not autodetect dmenu or a similar tool, please configure one manually
    fi

    conf_dmenu=${dmenu:-$DMENU}

    conf_autoplay=${autoplay:-true}

    conf_vid_pre=${video_prefix:-[V] }

    conf_com_pre=${comic_prefix:-[C] }
}

aiu_conf_show() {
    printf "video_library=\"%s\"\n" $conf_vid_lib
    printf "comic_library=\"%s\"\n" $conf_com_lib
    printf "player=\"%s\"\n" $conf_player
    printf "reader=\"%s\"\n" $conf_reader
    printf "dmenu=\"%s\"\n" $conf_dmenu
    printf "autoplay=\"%s\"\n" $conf_autoplay
    printf "video_prefix=\"%s\"\n" $conf_vid_pre
    printf "comic_prefix=\"%s\"\n" $conf_com_pre
}

aiu_add() {
    LOCAL name ename target display_name; BEGIN
    if not str empty $1 && str ematch $1 '(\[.*\])?.* (- )|#[0-9]+'; then
        name=$(basename $1)
        if str ematch $name '.*\.part$'; then
            name=${name%.part}
        fi
        if str ematch $name '.*\.[[:alnum:]]+$'; then
            name=${name%.*}
        fi
        shellquote -f name
        findquote ename=$name
        target="$(find "$conf_vid_lib" "$conf_com_lib" -type f -name "*$ename*")"
        if is -L reg $target; then
            case $target in
            ( $conf_vid_lib/* )
                display_name=V$name
                ;;
            ( $conf_com_lib/* )
                display_name=C$name
                ;;
            esac
            replacein -a display_name '"' ''
            if not grep -Fxq $display_name $aiu_home/backlog; then
                putln $display_name >> "$aiu_home/backlog"
                putln "$name added"
            else
                putln "File already in backlog"
                return 1
            fi
        else
            putln "$name not found"
            return 1
        fi
    else
        putln "Please specify a file to add"
        return 1
    fi
    END
}

aiu_add_dir() {
    LOCAL file; BEGIN
    LOOP find file -type f; DO
    if str ematch $file '(\[.*\])?.* (- )|#[0-9]+'; then
            aiu_add $file
        fi
    DONE
    END
}

aiu_open() {
    LOCAL name ename target; BEGIN
    if name=$(aiu_select); then
        replacein name $conf_vid_pre ''
        replacein name $conf_com_pre ''
        shellquote -f name
        findquote ename=$name
        target=$(find $conf_vid_lib $conf_com_lib -type f -name "*${ename}*")
        case $target in
        ( $conf_vid_lib/* )
            shellquote target
            eval $conf_player $target
            ;;
        ( $conf_com_lib/* )
            shellquote target
            eval $conf_reader $target
            ;;
        esac
        replacein -a name '"' ''
        grep -Fv $name $aiu_home/backlog > $aiu_home/backlog.new
        mv $aiu_home/backlog.new $aiu_home/backlog
    fi
    END
}

aiu_select() {
    LOCAL series episodes; BEGIN
    if is nonempty $aiu_home/backlog; then
        series=$(sort -g $aiu_home/backlog |
                 sed -E\
                     -e 's/( -)? [[:digit:]]+[.[:alnum:]]*( \[[[:digit:]]+p\])?//' \
                     -e s/^V/${conf_vid_pre}/ \
                     -e s/^C/${conf_com_pre}/ |
                 uniq | eval $conf_dmenu)
        if so; then
            replacein series ${conf_vid_pre} ''
            replacein series ${conf_com_pre} ''
            trim series

            episodes=$(grep -F $series $aiu_home/backlog |
                       sed -e s/^V/${conf_vid_pre}/ \
                           -e s/^C/${conf_com_pre}/ |
                       sort -g);
            if $conf_autoplay eq true; then
                putln $episodes | head -n 1
            else
                putln $episodes | eval $conf_dmenu
            fi
        else
            exit 1
        fi
    else
      printf "%s\n%s" "The backlog is empty" "Try adding something with 'aiu add'" | eval $conf_dmenu && exit 1
    fi
    END
}

aiu_clean() {
    LOCAL name; BEGIN
    mv $aiu_home/backlog $aiu_home/backlog.temp
    touch $aiu_home/backlog
    sed -E -e s/^V// -e s/^C// $aiu_home/backlog.temp |
    while read -r name; do
        replacein name '"' ''
        aiu_add $name
    done
    rm $aiu_home/backlog.temp
    END
}

aiu_init
aiu_conf_load

case $1 in
    ( list|l )
        sort -g $aiu_home/backlog | sed -E -e s/^V/${conf_vid_pre}/ -e s/^C/${conf_com_pre}/
        ;;
    ( open|o )
        aiu_open
        ;;
    ( add|a )
        aiu_add $2
        ;;
    ( dir|d )
        aiu_add_dir
        ;;
    ( show|s )
        aiu_conf_show
        ;;
    ( write|w )
        aiu_conf_show >| $aiu_home/config
        ;;
    ( edit|e )
        $EDITOR $aiu_home/config
        ;;
    ( clean|c )
        aiu_clean
        ;;
    ( help|h )
        showusage
        ;;
    ( * )
        exit -u 1 "Invalid command"
esac
